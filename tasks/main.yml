---
## ---------------------------------------------------------------
#                           Check install
## ---------------------------------------------------------------
- name: Install python-docker
  package: 
    name: python-docker
## ---------------------------------------------------------------
#                           Clean
## ---------------------------------------------------------------

- name: clean up instances that are not used
  shell: "docker ps --format '{{ '{{' }} .Names {{ '}}' }}'" # nasty, docker uses curly brackets too!
  register: currently_present
  changed_when: False

- debug: var=currently_present
  when: playbook_debug

- name: determine which instances to be present
  set_fact:
    should_be_present: "{{ docker_containers | map(attribute='name') | list | unique }}"

- debug: var=should_be_present
  when: playbook_debug

- name: determine what instance will get removed
  set_fact:
    should_be_removed: "{{ currently_present.stdout_lines | difference(should_be_present) }}"

- debug: var=should_be_removed
  when: playbook_debug

- name: remove unwanted containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - "{{ should_be_removed }}"
  when: enable_remove_unwanted_containers

- name: remove related images
  shell: "docker rmi $(docker images | grep '{{ item }}' | awk '{print $1}')"
  with_items:
    - "{{ should_be_removed }}"
  when: enable_remove_unwanted_containers_img

- name: remove upstart files
  file:
    path: "/etc/init/docker-{{ item }}.conf"
    state: absent
  with_items:
    - "{{ should_be_removed }}"
  when: enable_remove_unwanted_containers and not init_systemD

- name: remove symlinks
  file:
    path: "/etc/init.d/docker-{{ item }}"
    state: absent
  with_items:
    - "{{ should_be_removed }}"
  when: enable_remove_unwanted_containers and not init_systemD

- name: remove Systemd Unit File files
  file:
    path: "/etc/systemd/system/docker-{{ item }}.service"
    state: absent
  with_items:
    - "{{ should_be_removed }}"
  when: enable_remove_unwanted_containers and init_systemD

## ---------------------------------------------------------------
#                           Create
## ---------------------------------------------------------------

- name: instance container
  docker_container:
    name: "{{ docker_container.name }}"
    image: "{{ docker_container.image | default(docker_container.name) }}"
    ignore_image: "{{ docker_container.ignore_image | default(omit) }}"
    pull: "{{ docker_container.pull | default(omit) }}"
    state: started
    cpu_period: "{{ docker_container.cpu_period | default(omit) }}"
    cpu_quota: "{{ docker_container.cpu_quota | default(omit) }}"
    cpu_shares: "{{ docker_container.cpu_shares | default(omit) }}"
    memory: "{{ docker_container.memory | default(omit) }}"
    memory_reservation: "{{ docker_container.memory_reservation | default(omit) }}"
    memory_swappiness: "{{ docker_container.memory_swappiness | default(omit) }}"
    memory_swap: "{{ docker_container.memory_swap | default(omit) }}"
    recreate: "{{ docker_container.recreate | default(omit) }}"
    restart_policy: "{{ docker_container.restart_policy | default(omit) }}"
    links: "{{ docker_container.links | default(omit) }}"
    network_mode: "{{ docker_container.network_mode | default(omit) }}"
    networks: "{{ docker_container.networks | default(omit) }}"
    detach: "{{ docker_container.detach | default(omit) }}"
    volumes: "{{ docker_container.volumes | default(omit) }}"
    published_ports: "{{ docker_container.published_ports | default(omit) }}"
    ulimits: "{{ docker_container.ulimits | default(omit) }}"
    env: "{{ docker_container.env | default('{}') }}"
    env_file: "{{ docker_container.env_file | default(omit) }}"
    log_driver: "{{ docker_container.log_driver | default(omit) }}"
    command: "{{ docker_container.command | default(omit) }}"

  loop_control:
    loop_var: docker_container
  with_items:
    - "{{ docker_containers }}"

- name: ensure upstart
  template:
    src: upstart.j2
    dest: "/etc/init/docker-{{ docker_container.name }}.conf"
  loop_control:
    loop_var: docker_container
  with_items:
    - "{{ docker_containers }}"
  when: not init_systemD

- name: symlink upstart script
  file:
    src: /lib/init/upstart-job
    dest: "/etc/init.d/docker-{{ docker_container.name }}"
    owner: root
    group: root
    mode: 0755
    force: yes
    state: link
  loop_control:
    loop_var: docker_container
  with_items:
    - "{{ docker_containers }}"
  when: not init_systemD

- name: Create Systemd Unit File as docker-{{ docker_container.name }}.service
  template: 
    src: systemd.j2
    dest: "/etc/systemd/system/docker-{{ docker_container.name }}.service"
  loop_control:
    loop_var: docker_container
  with_items:
    - "{{ docker_containers }}"
  when: init_systemD

- name: reload systemd daemon
  command: systemctl daemon-reload
  when: init_systemD

## ---------------------------------------------------------------
#                           Check & Report
## ---------------------------------------------------------------

- name: ensure service is starting on bootup
  service:
    name: "docker-{{ docker_container.name }}"
    state: started
    enabled: yes
  loop_control:
    loop_var: docker_container
  with_items:
    - "{{ docker_containers }}"

- name: check container status
  command: docker ps
  register: result
- debug: var=result.stdout
